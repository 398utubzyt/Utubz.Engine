// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace Utubz.Internal.Native.Stb.Image
{
    internal enum STBI
    {
        STBI_default = 0,
        STBI_grey = 1,
        STBI_grey_alpha = 2,
        STBI_rgb = 3,
        STBI_rgb_alpha = 4
    }

    /// <summary>///////////////////////////////////////////////////////////////////////////</summary>
    /// <summary>///////////////////////////////////////////////////////////////////////////</summary>
    internal unsafe partial class StbiIoCallbacks : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr read;
            internal __IntPtr skip;
            internal __IntPtr eof;

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "??0stbi_io_callbacks@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks>();

        protected bool __ownsNativeInstance;

        internal static StbiIoCallbacks __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new StbiIoCallbacks(native.ToPointer(), skipVTables);
        }

        internal static StbiIoCallbacks __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (StbiIoCallbacks)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static StbiIoCallbacks __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new StbiIoCallbacks(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StbiIoCallbacks(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StbiIoCallbacks(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public StbiIoCallbacks()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public StbiIoCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks.__Internal*) __Instance) = *((global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Utubz.Internal.Native.Stb.Image.Delegates.Func_int___IntPtr_sbytePtr_int Read
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->read;
                return __ptr0 == IntPtr.Zero? null : (global::Utubz.Internal.Native.Stb.Image.Delegates.Func_int___IntPtr_sbytePtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Utubz.Internal.Native.Stb.Image.Delegates.Func_int___IntPtr_sbytePtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->read = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Utubz.Internal.Native.Stb.Image.Delegates.Action___IntPtr_int Skip
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->skip;
                return __ptr0 == IntPtr.Zero? null : (global::Utubz.Internal.Native.Stb.Image.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Utubz.Internal.Native.Stb.Image.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->skip = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Utubz.Internal.Native.Stb.Image.Delegates.Func_int___IntPtr Eof
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->eof;
                return __ptr0 == IntPtr.Zero? null : (global::Utubz.Internal.Native.Stb.Image.Delegates.Func_int___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Utubz.Internal.Native.Stb.Image.Delegates.Func_int___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->eof = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    internal unsafe partial class stb_image
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* StbiLoadFromMemory(byte* buffer, int len, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_from_callbacks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* StbiLoadFromCallbacks(__IntPtr clbk, __IntPtr user, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* StbiLoad([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string filename, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_from_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* StbiLoadFromFile(__IntPtr f, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_gif_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* StbiLoadGifFromMemory(byte* buffer, int len, int** delays, int* x, int* y, int* z, int* comp, int req_comp);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_16_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort* StbiLoad16FromMemory(byte* buffer, int len, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_16_from_callbacks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort* StbiLoad16FromCallbacks(__IntPtr clbk, __IntPtr user, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_16", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort* StbiLoad16([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string filename, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_load_from_file_16", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort* StbiLoadFromFile16(__IntPtr f, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_loadf_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float* StbiLoadfFromMemory(byte* buffer, int len, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_loadf_from_callbacks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float* StbiLoadfFromCallbacks(__IntPtr clbk, __IntPtr user, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_loadf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float* StbiLoadf([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string filename, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_loadf_from_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float* StbiLoadfFromFile(__IntPtr f, int* x, int* y, int* channels_in_file, int desired_channels);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_hdr_to_ldr_gamma", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiHdrToLdrGamma(float gamma);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_hdr_to_ldr_scale", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiHdrToLdrScale(float scale);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_ldr_to_hdr_gamma", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiLdrToHdrGamma(float gamma);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_ldr_to_hdr_scale", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiLdrToHdrScale(float scale);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_hdr_from_callbacks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIsHdrFromCallbacks(__IntPtr clbk, __IntPtr user);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_hdr_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIsHdrFromMemory(byte* buffer, int len);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_hdr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIsHdr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string filename);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_hdr_from_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIsHdrFromFile(__IntPtr f);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_failure_reason", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr StbiFailureReason();

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_image_free", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiImageFree(__IntPtr retval_from_stbi_load);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_info_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiInfoFromMemory(byte* buffer, int len, int* x, int* y, int* comp);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_info_from_callbacks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiInfoFromCallbacks(__IntPtr clbk, __IntPtr user, int* x, int* y, int* comp);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_16_bit_from_memory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIs16BitFromMemory(byte* buffer, int len);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_16_bit_from_callbacks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIs16BitFromCallbacks(__IntPtr clbk, __IntPtr user);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_info", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiInfo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string filename, int* x, int* y, int* comp);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_info_from_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiInfoFromFile(__IntPtr f, int* x, int* y, int* comp);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_16_bit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIs16Bit([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string filename);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_is_16_bit_from_file", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiIs16BitFromFile(__IntPtr f);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_set_unpremultiply_on_load", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiSetUnpremultiplyOnLoad(int flag_true_if_should_unpremultiply);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_convert_iphone_png_to_rgb", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiConvertIphonePngToRgb(int flag_true_if_should_convert);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_set_flip_vertically_on_load", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiSetFlipVerticallyOnLoad(int flag_true_if_should_flip);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_set_unpremultiply_on_load_thread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiSetUnpremultiplyOnLoadThread(int flag_true_if_should_unpremultiply);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_convert_iphone_png_to_rgb_thread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiConvertIphonePngToRgbThread(int flag_true_if_should_convert);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_set_flip_vertically_on_load_thread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StbiSetFlipVerticallyOnLoadThread(int flag_true_if_should_flip);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_zlib_decode_malloc_guesssize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* StbiZlibDecodeMallocGuesssize([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string buffer, int len, int initial_size, int* outlen);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_zlib_decode_malloc_guesssize_headerflag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* StbiZlibDecodeMallocGuesssizeHeaderflag([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string buffer, int len, int initial_size, int* outlen, int parse_header);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_zlib_decode_malloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* StbiZlibDecodeMalloc([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string buffer, int len, int* outlen);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_zlib_decode_buffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiZlibDecodeBuffer(sbyte* obuffer, int olen, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string ibuffer, int ilen);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_zlib_decode_noheader_malloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* StbiZlibDecodeNoheaderMalloc([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string buffer, int len, int* outlen);

            [SuppressUnmanagedCodeSecurity, DllImport("stb_image", EntryPoint = "stbi_zlib_decode_noheader_buffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StbiZlibDecodeNoheaderBuffer(sbyte* obuffer, int olen, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utubz.Internal.Native.UTF8Marshaller))] string ibuffer, int ilen);
        }

        /// <summary>/////////////////////////////////</summary>
        public static byte* StbiLoadFromMemory(byte* buffer, int len, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __channels_in_file4 = &channels_in_file)
                    {
                        var __arg4 = __channels_in_file4;
                        var __ret = __Internal.StbiLoadFromMemory(buffer, len, __arg2, __arg3, __arg4, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static byte* StbiLoadFromCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks clbk, __IntPtr user, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            var __arg0 = clbk is null ? __IntPtr.Zero : clbk.__Instance;
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __channels_in_file4 = &channels_in_file)
                    {
                        var __arg4 = __channels_in_file4;
                        var __ret = __Internal.StbiLoadFromCallbacks(__arg0, user, __arg2, __arg3, __arg4, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static byte* StbiLoad(string filename, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __channels_in_file3 = &channels_in_file)
                    {
                        var __arg3 = __channels_in_file3;
                        var __ret = __Internal.StbiLoad(filename, __arg1, __arg2, __arg3, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static byte* StbiLoadFromFile(global::System.IntPtr f, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __channels_in_file3 = &channels_in_file)
                    {
                        var __arg3 = __channels_in_file3;
                        var __ret = __Internal.StbiLoadFromFile(f, __arg1, __arg2, __arg3, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static byte* StbiLoadGifFromMemory(byte* buffer, int len, int** delays, ref int x, ref int y, ref int z, ref int comp, int req_comp)
        {
            fixed (int* __x3 = &x)
            {
                var __arg3 = __x3;
                fixed (int* __y4 = &y)
                {
                    var __arg4 = __y4;
                    fixed (int* __z5 = &z)
                    {
                        var __arg5 = __z5;
                        fixed (int* __comp6 = &comp)
                        {
                            var __arg6 = __comp6;
                            var __ret = __Internal.StbiLoadGifFromMemory(buffer, len, delays, __arg3, __arg4, __arg5, __arg6, req_comp);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>/////////////////////////////////</summary>
        public static ushort* StbiLoad16FromMemory(byte* buffer, int len, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __channels_in_file4 = &channels_in_file)
                    {
                        var __arg4 = __channels_in_file4;
                        var __ret = __Internal.StbiLoad16FromMemory(buffer, len, __arg2, __arg3, __arg4, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static ushort* StbiLoad16FromCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks clbk, __IntPtr user, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            var __arg0 = clbk is null ? __IntPtr.Zero : clbk.__Instance;
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __channels_in_file4 = &channels_in_file)
                    {
                        var __arg4 = __channels_in_file4;
                        var __ret = __Internal.StbiLoad16FromCallbacks(__arg0, user, __arg2, __arg3, __arg4, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static ushort* StbiLoad16(string filename, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __channels_in_file3 = &channels_in_file)
                    {
                        var __arg3 = __channels_in_file3;
                        var __ret = __Internal.StbiLoad16(filename, __arg1, __arg2, __arg3, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static ushort* StbiLoadFromFile16(global::System.IntPtr f, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __channels_in_file3 = &channels_in_file)
                    {
                        var __arg3 = __channels_in_file3;
                        var __ret = __Internal.StbiLoadFromFile16(f, __arg1, __arg2, __arg3, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static float* StbiLoadfFromMemory(byte* buffer, int len, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __channels_in_file4 = &channels_in_file)
                    {
                        var __arg4 = __channels_in_file4;
                        var __ret = __Internal.StbiLoadfFromMemory(buffer, len, __arg2, __arg3, __arg4, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static float* StbiLoadfFromCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks clbk, __IntPtr user, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            var __arg0 = clbk is null ? __IntPtr.Zero : clbk.__Instance;
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __channels_in_file4 = &channels_in_file)
                    {
                        var __arg4 = __channels_in_file4;
                        var __ret = __Internal.StbiLoadfFromCallbacks(__arg0, user, __arg2, __arg3, __arg4, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static float* StbiLoadf(string filename, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __channels_in_file3 = &channels_in_file)
                    {
                        var __arg3 = __channels_in_file3;
                        var __ret = __Internal.StbiLoadf(filename, __arg1, __arg2, __arg3, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static float* StbiLoadfFromFile(global::System.IntPtr f, ref int x, ref int y, ref int channels_in_file, int desired_channels)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __channels_in_file3 = &channels_in_file)
                    {
                        var __arg3 = __channels_in_file3;
                        var __ret = __Internal.StbiLoadfFromFile(f, __arg1, __arg2, __arg3, desired_channels);
                        return __ret;
                    }
                }
            }
        }

        public static void StbiHdrToLdrGamma(float gamma)
        {
            __Internal.StbiHdrToLdrGamma(gamma);
        }

        public static void StbiHdrToLdrScale(float scale)
        {
            __Internal.StbiHdrToLdrScale(scale);
        }

        public static void StbiLdrToHdrGamma(float gamma)
        {
            __Internal.StbiLdrToHdrGamma(gamma);
        }

        public static void StbiLdrToHdrScale(float scale)
        {
            __Internal.StbiLdrToHdrScale(scale);
        }

        public static int StbiIsHdrFromCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks clbk, __IntPtr user)
        {
            var __arg0 = clbk is null ? __IntPtr.Zero : clbk.__Instance;
            var __ret = __Internal.StbiIsHdrFromCallbacks(__arg0, user);
            return __ret;
        }

        public static int StbiIsHdrFromMemory(byte* buffer, int len)
        {
            var __ret = __Internal.StbiIsHdrFromMemory(buffer, len);
            return __ret;
        }

        public static int StbiIsHdr(string filename)
        {
            var __ret = __Internal.StbiIsHdr(filename);
            return __ret;
        }

        public static int StbiIsHdrFromFile(global::System.IntPtr f)
        {
            var __ret = __Internal.StbiIsHdrFromFile(f);
            return __ret;
        }

        public static string StbiFailureReason()
        {
            var __ret = __Internal.StbiFailureReason();
            return Utubz.Internal.Native.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
        }

        public static void StbiImageFree(__IntPtr retval_from_stbi_load)
        {
            __Internal.StbiImageFree(retval_from_stbi_load);
        }

        public static int StbiInfoFromMemory(byte* buffer, int len, ref int x, ref int y, ref int comp)
        {
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __comp4 = &comp)
                    {
                        var __arg4 = __comp4;
                        var __ret = __Internal.StbiInfoFromMemory(buffer, len, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static int StbiInfoFromCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks clbk, __IntPtr user, ref int x, ref int y, ref int comp)
        {
            var __arg0 = clbk is null ? __IntPtr.Zero : clbk.__Instance;
            fixed (int* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (int* __y3 = &y)
                {
                    var __arg3 = __y3;
                    fixed (int* __comp4 = &comp)
                    {
                        var __arg4 = __comp4;
                        var __ret = __Internal.StbiInfoFromCallbacks(__arg0, user, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static int StbiIs16BitFromMemory(byte* buffer, int len)
        {
            var __ret = __Internal.StbiIs16BitFromMemory(buffer, len);
            return __ret;
        }

        public static int StbiIs16BitFromCallbacks(global::Utubz.Internal.Native.Stb.Image.StbiIoCallbacks clbk, __IntPtr user)
        {
            var __arg0 = clbk is null ? __IntPtr.Zero : clbk.__Instance;
            var __ret = __Internal.StbiIs16BitFromCallbacks(__arg0, user);
            return __ret;
        }

        public static int StbiInfo(string filename, ref int x, ref int y, ref int comp)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __comp3 = &comp)
                    {
                        var __arg3 = __comp3;
                        var __ret = __Internal.StbiInfo(filename, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static int StbiInfoFromFile(global::System.IntPtr f, ref int x, ref int y, ref int comp)
        {
            fixed (int* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (int* __y2 = &y)
                {
                    var __arg2 = __y2;
                    fixed (int* __comp3 = &comp)
                    {
                        var __arg3 = __comp3;
                        var __ret = __Internal.StbiInfoFromFile(f, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static int StbiIs16Bit(string filename)
        {
            var __ret = __Internal.StbiIs16Bit(filename);
            return __ret;
        }

        public static int StbiIs16BitFromFile(global::System.IntPtr f)
        {
            var __ret = __Internal.StbiIs16BitFromFile(f);
            return __ret;
        }

        public static void StbiSetUnpremultiplyOnLoad(int flag_true_if_should_unpremultiply)
        {
            __Internal.StbiSetUnpremultiplyOnLoad(flag_true_if_should_unpremultiply);
        }

        public static void StbiConvertIphonePngToRgb(int flag_true_if_should_convert)
        {
            __Internal.StbiConvertIphonePngToRgb(flag_true_if_should_convert);
        }

        public static void StbiSetFlipVerticallyOnLoad(int flag_true_if_should_flip)
        {
            __Internal.StbiSetFlipVerticallyOnLoad(flag_true_if_should_flip);
        }

        public static void StbiSetUnpremultiplyOnLoadThread(int flag_true_if_should_unpremultiply)
        {
            __Internal.StbiSetUnpremultiplyOnLoadThread(flag_true_if_should_unpremultiply);
        }

        public static void StbiConvertIphonePngToRgbThread(int flag_true_if_should_convert)
        {
            __Internal.StbiConvertIphonePngToRgbThread(flag_true_if_should_convert);
        }

        public static void StbiSetFlipVerticallyOnLoadThread(int flag_true_if_should_flip)
        {
            __Internal.StbiSetFlipVerticallyOnLoadThread(flag_true_if_should_flip);
        }

        public static sbyte* StbiZlibDecodeMallocGuesssize(string buffer, int len, int initial_size, ref int outlen)
        {
            fixed (int* __outlen3 = &outlen)
            {
                var __arg3 = __outlen3;
                var __ret = __Internal.StbiZlibDecodeMallocGuesssize(buffer, len, initial_size, __arg3);
                return __ret;
            }
        }

        public static sbyte* StbiZlibDecodeMallocGuesssizeHeaderflag(string buffer, int len, int initial_size, ref int outlen, int parse_header)
        {
            fixed (int* __outlen3 = &outlen)
            {
                var __arg3 = __outlen3;
                var __ret = __Internal.StbiZlibDecodeMallocGuesssizeHeaderflag(buffer, len, initial_size, __arg3, parse_header);
                return __ret;
            }
        }

        public static sbyte* StbiZlibDecodeMalloc(string buffer, int len, ref int outlen)
        {
            fixed (int* __outlen2 = &outlen)
            {
                var __arg2 = __outlen2;
                var __ret = __Internal.StbiZlibDecodeMalloc(buffer, len, __arg2);
                return __ret;
            }
        }

        public static int StbiZlibDecodeBuffer(sbyte* obuffer, int olen, string ibuffer, int ilen)
        {
            var __ret = __Internal.StbiZlibDecodeBuffer(obuffer, olen, ibuffer, ilen);
            return __ret;
        }

        public static sbyte* StbiZlibDecodeNoheaderMalloc(string buffer, int len, ref int outlen)
        {
            fixed (int* __outlen2 = &outlen)
            {
                var __arg2 = __outlen2;
                var __ret = __Internal.StbiZlibDecodeNoheaderMalloc(buffer, len, __arg2);
                return __ret;
            }
        }

        public static int StbiZlibDecodeNoheaderBuffer(sbyte* obuffer, int olen, string ibuffer, int ilen)
        {
            var __ret = __Internal.StbiZlibDecodeNoheaderBuffer(obuffer, olen, ibuffer, ilen);
            return __ret;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_sbytePtr_int(__IntPtr user, sbyte* data, int size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_int(__IntPtr user, int n);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr(__IntPtr user);
    }
}
